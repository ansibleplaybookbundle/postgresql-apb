- name: set production volume state to {{ state }}
  k8s_v1_persistent_volume_claim:
    name: postgresql
    namespace: '{{ namespace }}'
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ postgresql_volume_size }}'
    state: "{{ state }}"

- block:
  - name: Find pod we need to update
    shell: oc get pods -n {{ namespace }} -l app=rhscl-postgresql-apb -o custom-columns=name:.metadata.name --no-headers
    register: devpod

  - name: Create source pgpass
    shell: oc exec -n {{ namespace }} {{ devpod.stdout }} -- /bin/bash -c "echo '*:*:*:{{ postgresql_user }}:{{ postgresql_password }}' > ~/.pgpass"

  - name: Set permissions on source pgpass
    shell:  oc exec -n {{ namespace }} {{ devpod.stdout }} -- /bin/bash -c "chmod 600 ~/.pgpass"

  - name: Backup source database
    shell:  oc exec -n {{ namespace }} {{ devpod.stdout }} -- /bin/bash -c "PGPASSFILE=~/.pgpass pg_dump -h localhost -U '{{ postgresql_user }}' '{{ postgresql_database }}' > /tmp/db.dump"

  - name: Copy over db backup
    shell: oc cp -n {{ namespace }} {{ devpod.stdout }}:/tmp/db.dump /tmp/db.dump
  when: update is defined

- name: set production deployment config state to {{ state }}
  openshift_v1_deployment_config:
    name: postgresql
    namespace: '{{ namespace }}'
    labels:
      app: rhscl-postgresql-apb
      service: postgresql
    replicas: 1
    selector:
      app: rhscl-postgresql-apb
      service: postgresql
    strategy_type: Rolling
    strategy_rolling_params:
      interval_seconds: 1
      max_surge: 25%
      max_unavailable: 25%
      timeout_seconds: 600
      update_period_seconds: 1
    spec_template_metadata_labels:
      app: rhscl-postgresql-apb
      service: postgresql
    containers:
    - env:
      - name: POSTGRESQL_PASSWORD
        value: '{{ postgresql_password }}'
      - name: POSTGRESQL_USER
        value: '{{ postgresql_user }}'
      - name: POSTGRESQL_DATABASE
        value: '{{ postgresql_database }}'
      image: "{{ image }}"
      image_pull_policy: IfNotPresent
      name: postgresql
      ports:
      - container_port: 5432
        protocol: TCP
      termination_message_path: /dev/termination-log
      volume_mounts:
      - mount_path: /var/lib/pgsql/data
        name: postgresql
      working_dir: /
    dns_policy: ClusterFirst
    restart_policy: Always
    termination_grace_period_seconds: 30
    volumes:
    - name: postgresql
      persistent_volume_claim:
        claim_name: postgresql
    test: false
    triggers:
    - type: ConfigChange
    state: "{{ state }}"

- block:
  - pause:
      seconds: 30

  - name: Find pod we need to restore
    shell: oc get pods -n {{ namespace }} --show-all=false -l app=rhscl-postgresql-apb -o custom-columns=name:.metadata.name --no-headers
    register: prodpod

  - name: Copy over db backup
    shell: oc cp -n {{ namespace }} /tmp/db.dump {{ prodpod.stdout }}:tmp/db.dump

  - name: Create destination pgpass
    shell: oc exec -n {{ namespace }} {{ prodpod.stdout }} -- /bin/bash -c "echo '*:*:*:{{ postgresql_user }}:{{ postgresql_password }}' > ~/.pgpass"

  - name: Set permissions on destination pgpass
    shell:  oc exec -n {{ namespace }} {{ prodpod.stdout }} -- /bin/bash -c "chmod 600 ~/.pgpass"

  - name: Restore database
    shell:  oc exec -n {{ namespace }} {{ prodpod.stdout }} -- /bin/bash -c "psql -h localhost -U '{{ postgresql_user }}' '{{ postgresql_database }}' -f /tmp/db.dump"
  when: update is defined

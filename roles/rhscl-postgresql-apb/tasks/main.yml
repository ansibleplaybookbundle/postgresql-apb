- block:
  - name: Find pod we need to update
    shell: kubectl get pods -n {{ namespace }} -l app=rhscl-postgresql-apb -o custom-columns=name:.metadata.name --no-headers
    register: oldpod

  - name: Find dc we will clean up
    shell: oc get dc -n {{ namespace }} -l app=rhscl-postgresql-apb -o custom-columns=name:.metadata.name --no-headers
    register: olddc
    when: cluster=="openshift"

  - name: Find deployment we will clean up
    shell: kubectl get deploy -n {{ namespace }} -l app=rhscl-postgresql-apb -o custom-columns=name:.metadata.name --no-headers
    register: olddeploy
    when: cluster=="kubernetes"

  - name: Backup source database
    shell: kubectl exec -n {{ namespace }} {{ oldpod.stdout }} -- /bin/bash -c "pg_dumpall -f /tmp/db.dump"

  - name: Copy over db backup
    shell: kubectl cp -n {{ namespace }} {{ oldpod.stdout }}:/tmp/db.dump /tmp/db.dump
  when: update is defined

- name: set service state to {{ state }}
  k8s_v1_service:
    name: postgresql
    namespace: '{{ namespace }}'
    labels:
      app: rhscl-postgresql-apb
      service: postgresql
    selector:
      app: rhscl-postgresql-apb
      service: postgresql-{{ postgresql_version }}-{{ _apb_plan_id }}
    ports:
    - name: port-5432
      port: 5432
      protocol: TCP
      target_port: 5432
    state: "{{ state }}"
  register: postgres_service

- include_tasks: dev.yml
  when: _apb_plan_id == "dev"

- include_tasks: prod.yml
  when: _apb_plan_id == "prod"

- block:
  - name: Wait for postgres to come up
    wait_for:
      port: 5432
      host: "{{ postgres_service.service.spec.cluster_ip }}"
      timeout: 300

  - name: Find pod we need to restore
    shell: kubectl get pods -n {{ namespace }} --show-all=false -l service=postgresql-{{ postgresql_version }}-{{ _apb_plan_id }} -o custom-columns=name:.metadata.name --no-headers
    register: newpod

  - block:
    - name: Copy over db backup
      shell: kubectl cp -n {{ namespace }} /tmp/db.dump {{ newpod.stdout }}:tmp/db.dump

    - name: Restore database
      shell: kubectl exec -n {{ namespace }} {{ newpod.stdout }} -- /bin/bash -c "psql -f /tmp/db.dump"

    - name: Remove deployment config
      openshift_v1_deployment_config:
        name: "{{ olddc.stdout }}"
        namespace: '{{ namespace }}'
        state: absent
      when: cluster=="openshift"

    - name: Remove deployment
      k8s_extensions_v1beta1_deployment:
        name: "{{ olddeploy.stdout }}"
        namespace: '{{ namespace }}'
        state: absent
      when: cluster=="kubernetes"

    - name: ensure production volume is absent
      k8s_v1_persistent_volume_claim:
        name: postgresql-{{ item }}-prod
        namespace: '{{ namespace }}'
        access_modes:
          - ReadWriteOnce
        resources_requests:
          storage: '{{ postgresql_volume_size }}'
        state: "absent"
      with_items:
        - "9.4"
        - "9.5"
        - "9.6"
      when: _apb_plan_id == "dev" or item != postgresql_version
    when: newpod.stdout != oldpod.stdout
  when: update is defined

- name: encode bind credentials
  asb_encode_binding:
    fields:
      DB_TYPE: postgres
      DB_HOST: postgresql
      DB_PORT: "5432"
      DB_USER: "{{ postgresql_user }}"
      DB_PASSWORD: "{{ postgresql_password }}"
      DB_NAME: "{{ postgresql_database }}"
  when: state == 'present'
